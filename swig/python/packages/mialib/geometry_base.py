# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""
Module containing base I/O image funcionalities.  They correspond directly to the MIALib C function wrapped to python thanks to SWIG.  This is an initial test module for the JIPL (Joint Image Processing Library) developed in the framework of the JEODPP of the EO&SS@BD pilot project.
Contact: Pierre.Soille@jrc.ec.europa.eu
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_geometry_base', [dirname(__file__)])
        except ImportError:
            import _geometry_base
            return _geometry_base
        if fp is not None:
            try:
                _mod = imp.load_module('_geometry_base', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _geometry_base = swig_import_helper()
    del swig_import_helper
else:
    import _geometry_base
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


ADD_op = _geometry_base.ADD_op
SUB_op = _geometry_base.SUB_op
MULT_op = _geometry_base.MULT_op
DIV_op = _geometry_base.DIV_op
INF_op = _geometry_base.INF_op
SUP_op = _geometry_base.SUP_op
MASK_op = _geometry_base.MASK_op
ADD_op_ovfl = _geometry_base.ADD_op_ovfl
SUB_op_ovfl = _geometry_base.SUB_op_ovfl
MULT_op_ovfl = _geometry_base.MULT_op_ovfl
AND_op = _geometry_base.AND_op
OR_op = _geometry_base.OR_op
XOR_op = _geometry_base.XOR_op
CMP_op = _geometry_base.CMP_op
ABSSUB_op = _geometry_base.ABSSUB_op
MASK_op2 = _geometry_base.MASK_op2
SUBSWAP_op = _geometry_base.SUBSWAP_op
SUBSWAP_op_ovfl = _geometry_base.SUBSWAP_op_ovfl
EQUAL_op = _geometry_base.EQUAL_op
OVW_op = _geometry_base.OVW_op
POW_op = _geometry_base.POW_op
NDI_op = _geometry_base.NDI_op
SUBSWAPCST_op = _geometry_base.SUBSWAPCST_op
FirstBitOn_op = _geometry_base.FirstBitOn_op
NAND_op = _geometry_base.NAND_op
ATAN_op = _geometry_base.ATAN_op
COS_op = _geometry_base.COS_op
SIN_op = _geometry_base.SIN_op
_MIATYPES_H = _geometry_base._MIATYPES_H
class G_TYPE(_object):
    """
    C++ includes: miatypes.h

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, G_TYPE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, G_TYPE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["generic_val"] = _geometry_base.G_TYPE_generic_val_set
    __swig_getmethods__["generic_val"] = _geometry_base.G_TYPE_generic_val_get
    if _newclass:generic_val = _swig_property(_geometry_base.G_TYPE_generic_val_get, _geometry_base.G_TYPE_generic_val_set)
    __swig_setmethods__["uc_val"] = _geometry_base.G_TYPE_uc_val_set
    __swig_getmethods__["uc_val"] = _geometry_base.G_TYPE_uc_val_get
    if _newclass:uc_val = _swig_property(_geometry_base.G_TYPE_uc_val_get, _geometry_base.G_TYPE_uc_val_set)
    __swig_setmethods__["us_val"] = _geometry_base.G_TYPE_us_val_set
    __swig_getmethods__["us_val"] = _geometry_base.G_TYPE_us_val_get
    if _newclass:us_val = _swig_property(_geometry_base.G_TYPE_us_val_get, _geometry_base.G_TYPE_us_val_set)
    __swig_setmethods__["s_val"] = _geometry_base.G_TYPE_s_val_set
    __swig_getmethods__["s_val"] = _geometry_base.G_TYPE_s_val_get
    if _newclass:s_val = _swig_property(_geometry_base.G_TYPE_s_val_get, _geometry_base.G_TYPE_s_val_set)
    __swig_setmethods__["u32_val"] = _geometry_base.G_TYPE_u32_val_set
    __swig_getmethods__["u32_val"] = _geometry_base.G_TYPE_u32_val_get
    if _newclass:u32_val = _swig_property(_geometry_base.G_TYPE_u32_val_get, _geometry_base.G_TYPE_u32_val_set)
    __swig_setmethods__["i32_val"] = _geometry_base.G_TYPE_i32_val_set
    __swig_getmethods__["i32_val"] = _geometry_base.G_TYPE_i32_val_get
    if _newclass:i32_val = _swig_property(_geometry_base.G_TYPE_i32_val_get, _geometry_base.G_TYPE_i32_val_set)
    __swig_setmethods__["u64_val"] = _geometry_base.G_TYPE_u64_val_set
    __swig_getmethods__["u64_val"] = _geometry_base.G_TYPE_u64_val_get
    if _newclass:u64_val = _swig_property(_geometry_base.G_TYPE_u64_val_get, _geometry_base.G_TYPE_u64_val_set)
    __swig_setmethods__["i64_val"] = _geometry_base.G_TYPE_i64_val_set
    __swig_getmethods__["i64_val"] = _geometry_base.G_TYPE_i64_val_get
    if _newclass:i64_val = _swig_property(_geometry_base.G_TYPE_i64_val_get, _geometry_base.G_TYPE_i64_val_set)
    __swig_setmethods__["f_val"] = _geometry_base.G_TYPE_f_val_set
    __swig_getmethods__["f_val"] = _geometry_base.G_TYPE_f_val_get
    if _newclass:f_val = _swig_property(_geometry_base.G_TYPE_f_val_get, _geometry_base.G_TYPE_f_val_set)
    __swig_setmethods__["d_val"] = _geometry_base.G_TYPE_d_val_set
    __swig_getmethods__["d_val"] = _geometry_base.G_TYPE_d_val_get
    if _newclass:d_val = _swig_property(_geometry_base.G_TYPE_d_val_get, _geometry_base.G_TYPE_d_val_set)
    def __init__(self): 
        """
        __init__(G_TYPE self) -> G_TYPE

        C++ includes: miatypes.h

        """
        this = _geometry_base.new_G_TYPE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geometry_base.delete_G_TYPE
    __del__ = lambda self : None;
G_TYPE_swigregister = _geometry_base.G_TYPE_swigregister
G_TYPE_swigregister(G_TYPE)

class IMAGE(_object):
    """
    C++ includes: miatypes.h

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMAGE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMAGE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p_im"] = _geometry_base.IMAGE_p_im_set
    __swig_getmethods__["p_im"] = _geometry_base.IMAGE_p_im_get
    if _newclass:p_im = _swig_property(_geometry_base.IMAGE_p_im_get, _geometry_base.IMAGE_p_im_set)
    __swig_setmethods__["DataType"] = _geometry_base.IMAGE_DataType_set
    __swig_getmethods__["DataType"] = _geometry_base.IMAGE_DataType_get
    if _newclass:DataType = _swig_property(_geometry_base.IMAGE_DataType_get, _geometry_base.IMAGE_DataType_set)
    __swig_setmethods__["nx"] = _geometry_base.IMAGE_nx_set
    __swig_getmethods__["nx"] = _geometry_base.IMAGE_nx_get
    if _newclass:nx = _swig_property(_geometry_base.IMAGE_nx_get, _geometry_base.IMAGE_nx_set)
    __swig_setmethods__["ny"] = _geometry_base.IMAGE_ny_set
    __swig_getmethods__["ny"] = _geometry_base.IMAGE_ny_get
    if _newclass:ny = _swig_property(_geometry_base.IMAGE_ny_get, _geometry_base.IMAGE_ny_set)
    __swig_setmethods__["nz"] = _geometry_base.IMAGE_nz_set
    __swig_getmethods__["nz"] = _geometry_base.IMAGE_nz_get
    if _newclass:nz = _swig_property(_geometry_base.IMAGE_nz_get, _geometry_base.IMAGE_nz_set)
    __swig_setmethods__["NByte"] = _geometry_base.IMAGE_NByte_set
    __swig_getmethods__["NByte"] = _geometry_base.IMAGE_NByte_get
    if _newclass:NByte = _swig_property(_geometry_base.IMAGE_NByte_get, _geometry_base.IMAGE_NByte_set)
    __swig_setmethods__["vol"] = _geometry_base.IMAGE_vol_set
    __swig_getmethods__["vol"] = _geometry_base.IMAGE_vol_get
    if _newclass:vol = _swig_property(_geometry_base.IMAGE_vol_get, _geometry_base.IMAGE_vol_set)
    __swig_setmethods__["lut"] = _geometry_base.IMAGE_lut_set
    __swig_getmethods__["lut"] = _geometry_base.IMAGE_lut_get
    if _newclass:lut = _swig_property(_geometry_base.IMAGE_lut_get, _geometry_base.IMAGE_lut_set)
    __swig_setmethods__["g"] = _geometry_base.IMAGE_g_set
    __swig_getmethods__["g"] = _geometry_base.IMAGE_g_get
    if _newclass:g = _swig_property(_geometry_base.IMAGE_g_get, _geometry_base.IMAGE_g_set)
    def __init__(self, *args): 
        """
        __init__(IMAGE self, int type, long nx, int ny, int nz) -> IMAGE

        C++ includes: miatypes.h

        """
        this = _geometry_base.new_IMAGE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geometry_base.delete_IMAGE
    __del__ = lambda self : None;
    def iminfoMethod(self):
        """iminfoMethod(IMAGE self)"""
        return _geometry_base.IMAGE_iminfoMethod(self)

IMAGE_swigregister = _geometry_base.IMAGE_swigregister
IMAGE_swigregister(IMAGE)

class IMBLOB(_object):
    """
    C++ includes: miatypes.h

    """
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMBLOB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMBLOB, name)
    __repr__ = _swig_repr
    __swig_setmethods__["area"] = _geometry_base.IMBLOB_area_set
    __swig_getmethods__["area"] = _geometry_base.IMBLOB_area_get
    if _newclass:area = _swig_property(_geometry_base.IMBLOB_area_get, _geometry_base.IMBLOB_area_set)
    __swig_setmethods__["m00"] = _geometry_base.IMBLOB_m00_set
    __swig_getmethods__["m00"] = _geometry_base.IMBLOB_m00_get
    if _newclass:m00 = _swig_property(_geometry_base.IMBLOB_m00_get, _geometry_base.IMBLOB_m00_set)
    __swig_setmethods__["m10"] = _geometry_base.IMBLOB_m10_set
    __swig_getmethods__["m10"] = _geometry_base.IMBLOB_m10_get
    if _newclass:m10 = _swig_property(_geometry_base.IMBLOB_m10_get, _geometry_base.IMBLOB_m10_set)
    __swig_setmethods__["m01"] = _geometry_base.IMBLOB_m01_set
    __swig_getmethods__["m01"] = _geometry_base.IMBLOB_m01_get
    if _newclass:m01 = _swig_property(_geometry_base.IMBLOB_m01_get, _geometry_base.IMBLOB_m01_set)
    __swig_setmethods__["minor"] = _geometry_base.IMBLOB_minor_set
    __swig_getmethods__["minor"] = _geometry_base.IMBLOB_minor_get
    if _newclass:minor = _swig_property(_geometry_base.IMBLOB_minor_get, _geometry_base.IMBLOB_minor_set)
    __swig_setmethods__["major"] = _geometry_base.IMBLOB_major_set
    __swig_getmethods__["major"] = _geometry_base.IMBLOB_major_get
    if _newclass:major = _swig_property(_geometry_base.IMBLOB_major_get, _geometry_base.IMBLOB_major_set)
    __swig_setmethods__["irradiance"] = _geometry_base.IMBLOB_irradiance_set
    __swig_getmethods__["irradiance"] = _geometry_base.IMBLOB_irradiance_get
    if _newclass:irradiance = _swig_property(_geometry_base.IMBLOB_irradiance_get, _geometry_base.IMBLOB_irradiance_set)
    __swig_setmethods__["xcg"] = _geometry_base.IMBLOB_xcg_set
    __swig_getmethods__["xcg"] = _geometry_base.IMBLOB_xcg_get
    if _newclass:xcg = _swig_property(_geometry_base.IMBLOB_xcg_get, _geometry_base.IMBLOB_xcg_set)
    __swig_setmethods__["ycg"] = _geometry_base.IMBLOB_ycg_set
    __swig_getmethods__["ycg"] = _geometry_base.IMBLOB_ycg_get
    if _newclass:ycg = _swig_property(_geometry_base.IMBLOB_ycg_get, _geometry_base.IMBLOB_ycg_set)
    __swig_setmethods__["mu11"] = _geometry_base.IMBLOB_mu11_set
    __swig_getmethods__["mu11"] = _geometry_base.IMBLOB_mu11_get
    if _newclass:mu11 = _swig_property(_geometry_base.IMBLOB_mu11_get, _geometry_base.IMBLOB_mu11_set)
    __swig_setmethods__["mu20"] = _geometry_base.IMBLOB_mu20_set
    __swig_getmethods__["mu20"] = _geometry_base.IMBLOB_mu20_get
    if _newclass:mu20 = _swig_property(_geometry_base.IMBLOB_mu20_get, _geometry_base.IMBLOB_mu20_set)
    __swig_setmethods__["mu02"] = _geometry_base.IMBLOB_mu02_set
    __swig_getmethods__["mu02"] = _geometry_base.IMBLOB_mu02_get
    if _newclass:mu02 = _swig_property(_geometry_base.IMBLOB_mu02_get, _geometry_base.IMBLOB_mu02_set)
    __swig_setmethods__["ratio"] = _geometry_base.IMBLOB_ratio_set
    __swig_getmethods__["ratio"] = _geometry_base.IMBLOB_ratio_get
    if _newclass:ratio = _swig_property(_geometry_base.IMBLOB_ratio_get, _geometry_base.IMBLOB_ratio_set)
    __swig_setmethods__["dir"] = _geometry_base.IMBLOB_dir_set
    __swig_getmethods__["dir"] = _geometry_base.IMBLOB_dir_get
    if _newclass:dir = _swig_property(_geometry_base.IMBLOB_dir_get, _geometry_base.IMBLOB_dir_set)
    __swig_setmethods__["r"] = _geometry_base.IMBLOB_r_set
    __swig_getmethods__["r"] = _geometry_base.IMBLOB_r_get
    if _newclass:r = _swig_property(_geometry_base.IMBLOB_r_get, _geometry_base.IMBLOB_r_set)
    def __init__(self): 
        """
        __init__(IMBLOB self) -> IMBLOB

        C++ includes: miatypes.h

        """
        this = _geometry_base.new_IMBLOB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _geometry_base.delete_IMBLOB
    __del__ = lambda self : None;
IMBLOB_swigregister = _geometry_base.IMBLOB_swigregister
IMBLOB_swigregister(IMBLOB)

_MIALIB_GEOMETRY_H = _geometry_base._MIALIB_GEOMETRY_H

def framebox(*args):
  """
    framebox(IMAGE im, int * box, G_TYPE gval) -> ERROR_TYPE

    """
  return _geometry_base.framebox(*args)

def addframebox(*args):
  """
    addframebox(IMAGE im, int * box, G_TYPE gval) -> ERROR_TYPE

    """
  return _geometry_base.addframebox(*args)

def subframebox(*args):
  """
    subframebox(IMAGE im, int * box) -> ERROR_TYPE

    """
  return _geometry_base.subframebox(*args)

def dumpxyz(*args):
  """
    dumpxyz(IMAGE im, int x, int y, int z, int dx, int dy) -> ERROR_TYPE

    """
  return _geometry_base.dumpxyz(*args)

def imputop(*args):
  """
    imputop(IMAGE im1, IMAGE im2, int x, int y, int z, int op) -> ERROR_TYPE

    """
  return _geometry_base.imputop(*args)

def imputcompose(*args):
  """
    imputcompose(IMAGE im1, IMAGE imlbl, IMAGE im2, int x, int y, int z, int val) -> ERROR_TYPE

    """
  return _geometry_base.imputcompose(*args)

def imcut(*args):
  """
    imcut(IMAGE im, int x1, int y1, int z1, int x2, int y2, int z2) -> IMAGE

    """
  return _geometry_base.imcut(*args)

def getboundingbox(*args):
  """
    getboundingbox(IMAGE im) -> IMAGE

    """
  return _geometry_base.getboundingbox(*args)

def magnify(*args):
  """
    magnify(IMAGE im, int n) -> IMAGE

    """
  return _geometry_base.magnify(*args)

def rotatecoor(*args):
  """
    rotatecoor(IMAGE im, double theta) -> IMAGE **

    """
  return _geometry_base.rotatecoor(*args)

def szcompat(*args):
  """
    szcompat(IMAGE im1, IMAGE im2) -> ERROR_TYPE

    """
  return _geometry_base.szcompat(*args)

def szgeocompat(*args):
  """
    szgeocompat(IMAGE im1, IMAGE im2) -> ERROR_TYPE

    """
  return _geometry_base.szgeocompat(*args)

def plotline(*args):
  """
    plotline(IMAGE im, int x1, int y1, int x2, int y2, int val) -> ERROR_TYPE

    """
  return _geometry_base.plotline(*args)

def ovlmatrix(*args):
  """
    ovlmatrix(IMAGE matrix, IMAGE maxg_array, char * odir) -> ERROR_TYPE

    """
  return _geometry_base.ovlmatrix(*args)
# This file is compatible with both classic and new-style classes.


